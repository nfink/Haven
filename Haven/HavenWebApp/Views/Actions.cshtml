@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<dynamic>
@using Haven;

@{var buttonClass = "button small-button bg-mauve bd-mauve bg-active-steel fg-white";}

@foreach (Player player in @Model)
{
    var playerName = player.Name == null ? " New Player" : " " + player.Name;
    var playerIcon = player.Piece == null ? "mif-user" : player.Piece.Image;
    var iconColor = "fg-" + (player.Piece == null ? "white" : player.Color.Name);
    var passwordFieldHidden = "";
    var passwordNotSet = "ribbed-olive";
    if (player.Password == null)
    {
        passwordFieldHidden = "display: none;";
        passwordNotSet = "passwordNotSet bg-olive";
    }
    
    <div class="actionContainer tile padding5 @passwordNotSet"
         playerid="@player.Id"
         onclick="SelectPlayer(this);"
         style="width: auto;
                height: auto;">

        <form onsubmit="return EnterPassword(this);"
               method="post"
               action="Authenticate">
            <input type="hidden" name="PlayerId" value="@player.Id" />
            <div class="playerName password iconic" data-role="input">
                <input class="requiredField" type="password" name="Password" style="@passwordFieldHidden">
                <span class="playerNameLabel">@playerName</span>
                <span class="playerNameInformer">Please enter your password</span>
                <span class="playerNamePlaceholder">@playerName</span>
                <span class="icon @playerIcon @iconColor"></span>
                <button class="playerNameButton @buttonClass"
                        type="submit">
                    <span class="mif-play fg-white"></span>
                </button>
            </div>
        </form>

        @foreach (Haven.Action action in player.Actions)
        {
            <div class="action padding5">
                @{
                    var onsubmit = "return PerformAction(this);";
                    if (action.Type == ActionType.EnterPassword)
                    {
                        onsubmit = "return EnterPasswordAction(this);";
                    }
                }
                <form onsubmit="@onsubmit"
                      method="post"
                      action="PerformAction"
                      playerid="@player.Id">
                    <input name="Id" value="@action.Id" type="hidden">
                    <input name="Password" type="hidden">
                    
                    @{ 
                        if (action.RequiresInput)
                        {
                            if (action.Type == ActionType.SelectPiece)
                            {
                                <div>
                                    <div style="float: left; padding-right: 5px;">
                                        <div class="imageSelect mif-question mif-2x" onclick="$(this).parent().find('.imagePad').toggle();"></div>
                                        <div class="imageValue" value="" style="display: none;"></div>
                                        <div class="imagePad keypad keypad-dropdown" style="position: absolute; z-index: 1000; width: 242px; display: none;">
                                            @foreach (Piece piece in Piece.Pieces)
                                            {
                                                <div class="key @piece.Image" pieceid="@piece.Id" image="@piece.Image" onclick="SelectIcon(this);"></div>
                                            }
                                        </div>
                                    </div>
                                    <div style="float: left; padding-right: 5px;">
                                        <div class="colorSelect bg-white" onclick="$(this).parent().find('.colorPad').toggle();"></div>
                                        <div class="colorValue" value="" style="display: none;"></div>
                                        <div class="colorPad keypad keypad-dropdown" style="position: absolute; z-index: 1000; width: 242px; display: none;">
                                            @foreach (Color color in Color.Colors)
                                            {
                                                <div class="key bg-@color.Name" colorid="@color.Id" name="@color.Name" onclick="SelectColor(this);"></div>
                                            }
                                        </div>
                                    </div>
                                    <input name="Input" type="hidden">
                                    <button type="submit" class="@buttonClass" disabled style="height: 100%;">Select Piece</button>
                                </div>
                            }
                            else
                            {
                                var text = action.Name;
                                var type = "text";
                                switch (action.Type)
                                {
                                    case ActionType.ReciteBibleVerse:
                                        text = "Enter bible verse";
                                        break;
                                    case ActionType.EnterName:
                                        text = "Your name";
                                        break;
                                    case ActionType.EnterPassword:
                                        text = "Your password";
                                        type = "password";
                                        break;
                                    default:
                                        break;
                                }
                                <div style="width: 100%;" data-role="input" class="input-control text">
                                    <input style="padding-right: 62px;height: 80%;" placeholder="@text" name="Input" type="@type" class="requiredField">
                                    <button class="@buttonClass" type="submit">
                                        <span class="mif-play"></span>
                                    </button>
                                </div><br>
                            }

                        }
                        else
                        {
                            var icon = "mif-question";
                            var color = "mauve";
                            var text = action.Name;
                            switch (action.Type)
                            {
                                case ActionType.AnswerChallenge:
                                    icon = "mif-question";
                                    text = action.Answer.Answer;
                                    break;
                                case ActionType.AnswerWarChallenge:
                                    icon = "mif-question";
                                    text = action.Answer.Answer;
                                    break;
                                case ActionType.DeclareWar:
                                    icon = action.Player.Piece.Image;
                                    color = action.Player.Color.Name;
                                    text = "Declare War";
                                    break;
                                case ActionType.DeclineWar:
                                    icon = "mif-florist";
                                    text = "No War";
                                    break;
                                case ActionType.EndTurn:
                                    icon = "mif-blocked";
                                    text = "End Turn";
                                    break;
                                case ActionType.ExchangePlaces:
                                    icon = action.Player.Piece.Image;
                                    color = action.Player.Color.Name;
                                    break;
                                case ActionType.ReadBibleVerse:
                                    icon = "mif-books";
                                    text = "Read";
                                    break;
                                case ActionType.Roll:
                                    icon = "mif-dice";
                                    text = "Roll";
                                    break;
                                case ActionType.RollToGo:
                                    icon = "mif-dice";
                                    text = "Roll To Go";
                                    break;
                                case ActionType.TurnAround:
                                    icon = "mif-undo";
                                    text = "Turn Around";
                                    break;
                                default:
                                    break;
                            }
                            
                            <input name="Input" type="hidden">
                            <button type="submit" class="@buttonClass image-button" style="width: 100%;">@text<span class="icon @icon bg-@color"></span>
                            </button>
                        }
                    }
                </form>
            </div>
        }
    </div>
}